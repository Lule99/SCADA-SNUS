//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReportManager.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IReportManagerService")]
    public interface IReportManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/AlarmsInPeriod", ReplyAction="http://tempuri.org/IReportManagerService/AlarmsInPeriodResponse")]
        System.Tuple<string, double, int, System.DateTime>[] AlarmsInPeriod(System.DateTime low, System.DateTime high);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/AlarmsInPeriod", ReplyAction="http://tempuri.org/IReportManagerService/AlarmsInPeriodResponse")]
        System.Threading.Tasks.Task<System.Tuple<string, double, int, System.DateTime>[]> AlarmsInPeriodAsync(System.DateTime low, System.DateTime high);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/AlarmsByPriority", ReplyAction="http://tempuri.org/IReportManagerService/AlarmsByPriorityResponse")]
        System.Tuple<string, double, int, System.DateTime>[] AlarmsByPriority(int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/AlarmsByPriority", ReplyAction="http://tempuri.org/IReportManagerService/AlarmsByPriorityResponse")]
        System.Threading.Tasks.Task<System.Tuple<string, double, int, System.DateTime>[]> AlarmsByPriorityAsync(int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/TagsInPeriod", ReplyAction="http://tempuri.org/IReportManagerService/TagsInPeriodResponse")]
        System.Tuple<double, System.DateTime>[] TagsInPeriod(System.DateTime low, System.DateTime high);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/TagsInPeriod", ReplyAction="http://tempuri.org/IReportManagerService/TagsInPeriodResponse")]
        System.Threading.Tasks.Task<System.Tuple<double, System.DateTime>[]> TagsInPeriodAsync(System.DateTime low, System.DateTime high);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/AnalogInputValuesReport", ReplyAction="http://tempuri.org/IReportManagerService/AnalogInputValuesReportResponse")]
        System.Tuple<double, System.DateTime>[] AnalogInputValuesReport();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/AnalogInputValuesReport", ReplyAction="http://tempuri.org/IReportManagerService/AnalogInputValuesReportResponse")]
        System.Threading.Tasks.Task<System.Tuple<double, System.DateTime>[]> AnalogInputValuesReportAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/DigitalInputValuesReport", ReplyAction="http://tempuri.org/IReportManagerService/DigitalInputValuesReportResponse")]
        System.Tuple<double, System.DateTime>[] DigitalInputValuesReport();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/DigitalInputValuesReport", ReplyAction="http://tempuri.org/IReportManagerService/DigitalInputValuesReportResponse")]
        System.Threading.Tasks.Task<System.Tuple<double, System.DateTime>[]> DigitalInputValuesReportAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/ReportByTagId", ReplyAction="http://tempuri.org/IReportManagerService/ReportByTagIdResponse")]
        System.Tuple<double, System.DateTime>[] ReportByTagId(string tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManagerService/ReportByTagId", ReplyAction="http://tempuri.org/IReportManagerService/ReportByTagIdResponse")]
        System.Threading.Tasks.Task<System.Tuple<double, System.DateTime>[]> ReportByTagIdAsync(string tagId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReportManagerServiceChannel : ReportManager.ServiceReference1.IReportManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReportManagerServiceClient : System.ServiceModel.ClientBase<ReportManager.ServiceReference1.IReportManagerService>, ReportManager.ServiceReference1.IReportManagerService {
        
        public ReportManagerServiceClient() {
        }
        
        public ReportManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReportManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Tuple<string, double, int, System.DateTime>[] AlarmsInPeriod(System.DateTime low, System.DateTime high) {
            return base.Channel.AlarmsInPeriod(low, high);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<string, double, int, System.DateTime>[]> AlarmsInPeriodAsync(System.DateTime low, System.DateTime high) {
            return base.Channel.AlarmsInPeriodAsync(low, high);
        }
        
        public System.Tuple<string, double, int, System.DateTime>[] AlarmsByPriority(int priority) {
            return base.Channel.AlarmsByPriority(priority);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<string, double, int, System.DateTime>[]> AlarmsByPriorityAsync(int priority) {
            return base.Channel.AlarmsByPriorityAsync(priority);
        }
        
        public System.Tuple<double, System.DateTime>[] TagsInPeriod(System.DateTime low, System.DateTime high) {
            return base.Channel.TagsInPeriod(low, high);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<double, System.DateTime>[]> TagsInPeriodAsync(System.DateTime low, System.DateTime high) {
            return base.Channel.TagsInPeriodAsync(low, high);
        }
        
        public System.Tuple<double, System.DateTime>[] AnalogInputValuesReport() {
            return base.Channel.AnalogInputValuesReport();
        }
        
        public System.Threading.Tasks.Task<System.Tuple<double, System.DateTime>[]> AnalogInputValuesReportAsync() {
            return base.Channel.AnalogInputValuesReportAsync();
        }
        
        public System.Tuple<double, System.DateTime>[] DigitalInputValuesReport() {
            return base.Channel.DigitalInputValuesReport();
        }
        
        public System.Threading.Tasks.Task<System.Tuple<double, System.DateTime>[]> DigitalInputValuesReportAsync() {
            return base.Channel.DigitalInputValuesReportAsync();
        }
        
        public System.Tuple<double, System.DateTime>[] ReportByTagId(string tagId) {
            return base.Channel.ReportByTagId(tagId);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<double, System.DateTime>[]> ReportByTagIdAsync(string tagId) {
            return base.Channel.ReportByTagIdAsync(tagId);
        }
    }
}
